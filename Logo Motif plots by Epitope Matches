library(ggseqlogo)
library(ggplot2)
library(dplyr)
library(gridExtra)

# Get all unique values in the spike column
spike_values <- unique(CD4merge$spike)

# Loop over each unique spike category
for (spike_cat in spike_values) {
    # Filter TRA sequences for the current spike category
    tra_sequences <- CD4merge %>% 
        filter(spike == spike_cat, chain == "TRA")
    
    # Get total TRA sequences for percentage calculation
    total_tra_ref <- nrow(tra_sequences)
    
    # Get the top 5 most frequent junction lengths
    top_lengths_tra <- names(sort(table(nchar(tra_sequences$junction)), decreasing = TRUE)[1:5])
    
    # Select only the top 3 lengths for plotting
    top_lengths_tra <- as.numeric(top_lengths_tra[1:3])
    
    # Create a list to store motif plots for TRA
    tra_plots <- list()
    
    # Generate motif plots for TRA
    for (length in top_lengths_tra) {
        tra_subset <- tra_sequences %>% filter(nchar(junction) == length)
        
        # Ensure we have enough sequences
        if (nrow(tra_subset) < 10) next  
        
        # Calculate percentage correctly
        percentage <- round((nrow(tra_subset) / total_tra_ref) * 100, 2)
        
        # Generate motif plot
        p <- ggseqlogo(tra_subset$junction, method = "bits") +
            ggtitle(paste("TRA Motif - Spike:", spike_cat, "- Length", length, 
                          "\n(", percentage, "% of TRA sequences in", spike_cat, ")")) +
            theme_minimal()
        
        # Store plot
        tra_plots[[as.character(length)]] <- p
    }
    
    # Save TRA figure
    if (length(tra_plots) > 0) {
        tra_filename <- paste0("spike_", gsub(" ", "_", spike_cat), "_TRA.png")
        png(tra_filename, width = 1200, height = 800)
        grid.arrange(grobs = tra_plots, ncol = 1)
        dev.off()
    }
    
    # --- TRB Processing ---
    trb_sequences <- CD4merge %>%
        filter(barcode %in% tra_sequences$barcode, chain == "TRB")
    
    # Get total TRB sequences across all junction lengths (fixed calculation)
    total_trb_ref <- nrow(trb_sequences)
    
    # Get the top 5 most frequent junction lengths in TRB
    top_lengths_trb <- names(sort(table(nchar(trb_sequences$junction)), decreasing = TRUE)[1:5])
    
    # Select only the top 3 lengths for plotting
    top_lengths_trb <- as.numeric(top_lengths_trb[1:3])
    
    # Create a list to store motif plots for TRB
    trb_plots <- list()
    
    # Generate motif plots for TRB
    for (length in top_lengths_trb) {
        trb_subset <- trb_sequences %>% filter(nchar(junction) == length)
        
        # Ensure we have enough sequences
        if (nrow(trb_subset) < 10) next  
        
        # Calculate percentage correctly
        percentage <- round((nrow(trb_subset) / total_trb_ref) * 100, 2)
        
        # Generate motif plot
        p <- ggseqlogo(trb_subset$junction, method = "bits") +
            ggtitle(paste("TRB Motif - Spike:", spike_cat, "- Length", length, 
                          "\n(", percentage, "% of TRB sequences in", spike_cat, ")")) +
            theme_minimal()
        
        # Store plot
        trb_plots[[as.character(length)]] <- p
    }
    
    # Save TRB figure
    if (length(trb_plots) > 0) {
        trb_filename <- paste0("spike_", gsub(" ", "_", spike_cat), "_TRB.png")
        png(trb_filename, width = 1200, height = 800)
        grid.arrange(grobs = trb_plots, ncol = 1)
        dev.off()
    }
}



second version 09/23/2025
# Step 0: Randomly sample 4,500 cells from each spike status category (unchanged)
set.seed(123)
sampled_data <- CD4merge %>%
    group_by(spike) %>%
    slice_sample(n = 4500) %>%
    ungroup() %>%
    mutate(spike = factor(spike))  # ensure factors for comparisons

# Step 1: Calculate the percentage of public cells for each spike status AND chain
public_percentage <- sampled_data %>%
    group_by(chain, spike) %>%
    summarise(percentage_public = mean(sharing == "public") * 100, .groups = "drop")

# Build all pairwise comparisons across the three x categories
all_comparisons <- combn(levels(sampled_data$spike), 2, simplify = FALSE)

# step 2 making the plot

p <- ggplot(public_percentage, aes(x = spike, y = percentage_public, fill = spike)) +
    geom_bar(stat = "identity", alpha = bar_alpha, fill = bar_fill_color) +
    labs(x = x_axis_label, y = y_axis_label) +  # <- no title
    theme(
        plot.title = element_blank(),           # <- remove title
        axis.text.x = element_text(
            size = rel(0.97),                    # <- slightly smaller text
            angle = angle_x_axis_text,
            vjust = x_axis_text_vjust,
            hjust = x_axis_text_hjust
        ),
        legend.position = "none"
    ) +
    facet_wrap(~ chain)


# Step 3: Add significance lines with exact p-values for ALL pairwise comparisons WITHIN each facet
# Use raw sampled_data with y scaled to percentage (0â€“100) so it matches the bar scale
p <- p + geom_signif(
    comparisons = all_comparisons,
    data = sampled_data,
    mapping = aes(x = spike, y = as.numeric(sharing == "public") * 100),
    test = "t.test",
    test.args = list(alternative = "two.sided", var.equal = FALSE),
    step_increase = 0.1,
    map_signif_level = FALSE,   # <- print exact p-values
    color = "black",
    size = 1
)

# Step 4: Save the plot (unchanged filename/dimensions)
ggsave(
    filename = "percentage_public_spike_graphfinal.png",
    plot = p,
    width = 17,
    height = 14,
    units = "in",
    dpi = 300
)
